{"version":3,"sources":["img/avatar.png","components/Contacts/UserInfo.js","components/Contacts/SearchContact.js","components/Contacts/ContactsList.js","components/Contacts/ContactsWrap.js","components/Chat/ContactInfo.js","components/Chat/Conversation.js","components/Chat/MessageInput.js","components/Chat/ChatWrap.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["UserInfo","props","src","avatar","SearchContact","onChange","bind","e","this","searchContact","target","value","type","title","placeholder","Component","ContactsList","contacts","sort","contact1","contact2","a","chatHistory","length","messageDate","b","Date","yy","mm","dd","hh","min","sec","filter","contact","searchedContact","contactName","toLocaleLowerCase","includes","toLowerCase","map","date","className","onClick","selectContact","id","messageText","ContactsWrap","state","setState","ContactInfo","selectedContact","Conversation","message","messageType","MessageInput","outMessage","onSubmit","preventDefault","sendMessage","ChatWrap","Boolean","find","selected","App","receiveMessage","JSON","parse","localStorage","getItem","uuidv4","contactPhoto","setItem","stringify","newMessage","updatedContacts","contactId","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","el","Object","assign","fetch","then","res","json","data","inMessage","setTimeout","respondMessage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6d6e0b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.23bed195.png\";","import React from 'react';\r\nimport avatar from \"../../img/avatar.png\"\r\n\r\nfunction UserInfo(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src={avatar}/>\r\n\t\t\t<h2>Anonymous</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default UserInfo;","import React, {Component} from 'react';\r\n\r\nclass SearchContact extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t}\r\n\r\n\tonChange(e) {\r\n\t\tthis.props.searchContact(e.target.value);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\t       title=\"searchedContact\"\r\n\t\t\t\t       placeholder=\"Search or start new chat\"\r\n\t\t\t\t       onChange={this.onChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default SearchContact;","import React, {Component} from 'react';\r\nimport avatar from \"../../img/avatar.png\"\r\n\r\nclass ContactsList extends Component{\r\n\trender() {\r\n\t\tconst SORTED_AND_FILTERED_CONTACTS = this.props.contacts.sort((contact1, contact2) => {\r\n\t\t\tconst a = contact1.chatHistory[contact1.chatHistory.length - 1].messageDate,\r\n\t\t\t\tb = contact2.chatHistory[contact2.chatHistory.length - 1].messageDate;\r\n\t\t\treturn new Date(b.yy, b.mm, b.dd, b.hh, b.min, b.sec) - new Date(a.yy, a.mm, a.dd, a.hh, a.min, a.sec);\r\n\t\t}).filter((contact) => {\r\n\t\t\tif(this.props.searchedContact) {\r\n\t\t\t\treturn contact.contactName.toLocaleLowerCase().includes(this.props.searchedContact.toLowerCase());\r\n\t\t\t} else {\r\n\t\t\t\treturn contact;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\treturn (SORTED_AND_FILTERED_CONTACTS.map((contact) => {\r\n\t\t\tconst date = contact.chatHistory[contact.chatHistory.length - 1].messageDate;\r\n\t\t\t\treturn (\r\n\t\t\t\t<div className=\"ContactList\" key={contact.id} onClick={this.props.selectContact.bind(this, contact.id)}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<img src={avatar}/>\r\n\t\t\t\t\t\t\t<h4>{contact.contactName}</h4>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{(date.min < 10) ? <span>{date.hh}:0{date.min} </span> : <span>{date.hh}:{date.min} </span>}\r\n\t\t\t\t\t\t\t<span>{date.dd}/{date.mm}/{date.yy}</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<p className=\"lastMassage\">{contact.chatHistory[contact.chatHistory.length - 1].messageText}</p>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}))\r\n\t}\r\n\r\n}\r\n\r\nexport default ContactsList;","import React, {Component} from 'react';\r\n\r\nimport UserInfo from \"./UserInfo\";\r\nimport SearchContact from \"./SearchContact\";\r\nimport ContactsList from \"./ContactsList\";\r\n\r\nclass ContactsWrap extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tsearchedContact: \"\"\r\n\t\t}\r\n\r\n\t\tthis.searchContact = this.searchContact.bind(this);\r\n\t}\r\n\r\n\t//Contact Search\r\n\tsearchContact(value) {\r\n\t\tthis.setState({\r\n\t\t\tsearchedContact: value\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"ContactsWrap\">\r\n\t\t\t\t<div className=\"UserInfo\">\r\n\t\t\t\t\t<UserInfo />\r\n\t\t\t\t\t<SearchContact searchContact = {this.searchContact} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"chats\">\r\n\t\t\t\t\t<h2><span>Chats</span></h2>\r\n\t\t\t\t\t<ContactsList contacts={this.props.contacts}\r\n\t\t\t\t\t              searchedContact={this.state.searchedContact}\r\n\t\t\t\t\t              selectContact={this.props.selectContact}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default ContactsWrap;","import React, {Component} from 'react';\r\nimport avatar from \"../../img/avatar.png\"\r\n\r\nclass ContactInfo extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"ContactInfo\">\r\n\t\t\t\t<img src={avatar} />\r\n\t\t\t\t<h2>{this.props.selectedContact.contactName}</h2>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default ContactInfo;","import React, {Component} from 'react';\r\n\r\nclass Conversation extends Component {\r\n\trender() {\r\n\t\treturn (this.props.selectedContact.chatHistory.map((message) => {\r\n\t\t\tconst date = message.messageDate;\r\n\t\t\t\t\treturn (<p key={new Date(date.yy, date.mm, date.dd, date.hh, date.min, date.sec)}\r\n\t\t\t\t\t           className={message.messageType}>\r\n\t\t\t\t\t\t{message.messageText}\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t{(date.min < 10) ? <span>{date.hh}:0{date.min} </span> : <span>{date.hh}:{date.min} </span>}\r\n\t\t\t\t\t\t\t<span>{date.dd}/{date.mm}/{date.yy}</span>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</p>)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Conversation;","import React, {Component} from 'react';\r\n\r\nclass MessageInput extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\toutMessage: \"\"\r\n\t\t}\r\n\r\n\t\tthis.onSubmit = this.onSubmit.bind(this);\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t}\r\n\r\n\tonSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tthis.props.sendMessage(this.state.outMessage);\r\n\t\tthis.setState({\r\n\t\t\toutMessage: \"\"\r\n\t\t})\r\n\t}\r\n\r\n\tonChange(e) {\r\n\t\tthis.setState({\r\n\t\t\toutMessage: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.onSubmit}>\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\t       placeholder=\"Type some message\"\r\n\t\t\t\t       value={this.state.outMessage}\r\n\t\t\t\t       onChange={this.onChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"submit\" value=\"Send\"/>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default MessageInput;","import React, {Component} from 'react';\r\n\r\nimport ContactInfo from \"./ContactInfo\";\r\nimport Conversation from \"./Conversation\";\r\nimport MessageInput from \"./MessageInput\";\r\n\r\nclass ChatWrap extends Component {\r\n\trender() {\r\n\t\tif(Boolean(this.props.contacts.find((contact) => {return contact.selected === true}))) {\r\n\t\t\tlet selectedContact = this.props.contacts.find((contact) => {\r\n\t\t\t\treturn contact.selected === true;\r\n\t\t\t})\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"ChatWrap\">\r\n\t\t\t\t\t<ContactInfo selectedContact={selectedContact} />\r\n\t\t\t\t\t<div className=\"conversation\">\r\n\t\t\t\t\t\t<Conversation selectedContact={selectedContact}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<MessageInput sendMessage={this.props.sendMessage}/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<p className=\"placeholder\">Select someone to chat with</p>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ChatWrap;","import React, {Component} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport \"../../styles/App.css\";\n\nimport ContactsWrap from \"../Contacts/ContactsWrap\";\nimport ChatWrap from \"../Chat/ChatWrap\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcontacts: []\n\t\t}\n\n\t\tthis.selectContact = this.selectContact.bind(this);\n\t\tthis.sendMessage = this.sendMessage.bind(this);\n\t\tthis.receiveMessage = this.receiveMessage.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tlet contacts = JSON.parse(localStorage.getItem('contacts')) ||\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tid: uuidv4(),\n\t\t\t\t\tcontactName: \"John\",\n\t\t\t\t\tcontactPhoto: \"\",\n\t\t\t\t\tselected: false,\n\t\t\t\t\tchatHistory: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\t\t\t\tmessageText: \"Hello\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 8,\n\t\t\t\t\t\t\t\thh: 12,\n\t\t\t\t\t\t\t\tmin: 56,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"outMessage\",\n\t\t\t\t\t\t\tmessageText: \"Hi\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 8,\n\t\t\t\t\t\t\t\thh: 13,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\t\t\t\tmessageText: \"How are you?\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 8,\n\t\t\t\t\t\t\t\thh: 13,\n\t\t\t\t\t\t\t\tmin: 1,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: uuidv4(),\n\t\t\t\t\tcontactName: \"Bob\",\n\t\t\t\t\tcontactPhoto: \"\",\n\t\t\t\t\tselected: false,\n\t\t\t\t\tchatHistory: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\t\t\t\tmessageText: \"We need to meet\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 7,\n\t\t\t\t\t\t\t\thh: 14,\n\t\t\t\t\t\t\t\tmin: 30,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"outMessage\",\n\t\t\t\t\t\t\tmessageText: \"Sorry, Im busy\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 7,\n\t\t\t\t\t\t\t\thh: 14,\n\t\t\t\t\t\t\t\tmin: 35,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: uuidv4(),\n\t\t\t\t\tcontactName: \"Den\",\n\t\t\t\t\tcontactPhoto: \"\",\n\t\t\t\t\tselected: false,\n\t\t\t\t\tchatHistory: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\t\t\t\tmessageText: \"I will find you and I will kill you\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 6,\n\t\t\t\t\t\t\t\thh: 15,\n\t\t\t\t\t\t\t\tmin: 56,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"outMessage\",\n\t\t\t\t\t\t\tmessageText: \"Very funny!\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 6,\n\t\t\t\t\t\t\t\thh: 17,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\t\t\t\tmessageText: \"I know\",\n\t\t\t\t\t\t\tmessageDate: {\n\t\t\t\t\t\t\t\tyy:2020,\n\t\t\t\t\t\t\t\tmm: 11,\n\t\t\t\t\t\t\t\tdd: 6,\n\t\t\t\t\t\t\t\thh: 17,\n\t\t\t\t\t\t\t\tmin: 20,\n\t\t\t\t\t\t\t\tsec: 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t;\n\n\t\tthis.setState({\n\t\t\tcontacts: contacts\n\t\t})\n\t}\n\n\tcomponentDidUpdate() {\n\t\tlocalStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n\t}\n\n\n\n\t//Select Contact\n\tselectContact(id) {\n\t\tthis.setState({\n\t\t\tcontacts: this.state.contacts.map((contact) => {\n\t\t\t\tcontact.selected = false;\n\t\t\t\tif(contact.id === id) {\n\t\t\t\t\tcontact.selected = !contact.selected;\n\t\t\t\t}\n\t\t\t\treturn contact;\n\t\t\t})\n\t\t})\n\t}\n\n\t//Send Message\n\tsendMessage(message) {\n\t\tif(message) {\n\t\t\tlet newMessage,\n\t\t\t\tnow = new Date(),\n\t\t\t\tupdatedContacts,\n\t\t\t\tcontactId;\n\n\t\t\tnewMessage = {\n\t\t\t\tmessageType: \"outMessage\",\n\t\t\t\tmessageText: message,\n\t\t\t\tmessageDate: {\n\t\t\t\t\tyy: now.getFullYear(),\n\t\t\t\t\tmm: now.getMonth() + 1,\n\t\t\t\t\tdd: now.getDate(),\n\t\t\t\t\thh: now.getHours(),\n\t\t\t\t\tmin: now.getMinutes(),\n\t\t\t\t\tsec: now.getSeconds()\n\t\t\t\t}\n\t\t\t};\n\t\t\tcontactId = this.state.contacts.find((contact) => {return contact.selected === true}).id;\n\t\t\tupdatedContacts = this.state.contacts.map(el => (el.selected === true ? Object.assign(el, {chatHistory : [...el.chatHistory, newMessage]}) : el));\n\n\t\t\tthis.setState({\n\t\t\t\tcontacts: updatedContacts\n\t\t\t})\n\n\t\t\tthis.receiveMessage(contactId)\n\t\t}\n\t}\n\n\t//Receive Message\n\treceiveMessage(id) {\n\t\tfetch('https://api.chucknorris.io/jokes/random')\n\t\t\t.then(res => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({inMessage: data.value})\n\t\t\t})\n\n\t\tsetTimeout(()=> {\n\t\t\tlet respondMessage, now = new Date(), updatedContacts;\n\t\t\trespondMessage = {\n\t\t\t\tmessageType: \"inMessage\",\n\t\t\t\tmessageText: this.state.inMessage,\n\t\t\t\tmessageDate: {\n\t\t\t\t\tyy: now.getFullYear(),\n\t\t\t\t\tmm: now.getMonth() + 1,\n\t\t\t\t\tdd: now.getDate(),\n\t\t\t\t\thh: now.getHours(),\n\t\t\t\t\tmin: now.getMinutes(),\n\t\t\t\t\tsec: now.getSeconds()\n\t\t\t\t}\n\t\t\t};\n\t\t\tupdatedContacts = this.state.contacts.map(el => (el.id === id ? Object.assign(el, {chatHistory : [...el.chatHistory, respondMessage]}) : el));\n\n\t\t\tthis.setState({\n\t\t\t\tcontacts: updatedContacts\n\t\t\t})\n\t\t}, 10000)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"Wrap\">\n\t\t\t\t\t<ContactsWrap contacts={this.state.contacts}\n\t\t\t\t\t              selectContact={this.selectContact}\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatWrap contacts={this.state.contacts}\n\t\t\t\t\t          sendMessage={this.sendMessage}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}